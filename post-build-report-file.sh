#!/bin/bash

# Script to post a pre-generated Specmatic build report JSON file to Specmatic Insights.
# This mimics the HTTP POST part of the 'postToSpecmaticInsights' function.

# --- Default values ---
SPECMATIC_INSIGHTS_HOST="https://insights.specmatic.io"
NO_VERIFY_SSL="false"
REPORT_FILE_PATH=""

# --- Helper function to display usage ---
usage() {
  echo "Usage: $0 --report-file <path_to_json_report> --host <insights_host_url> [--no-verify]"
  echo ""
  echo "Options:"
  echo "  --report-file, -rf FILE_PATH      Path to the JSON file containing the BuildReportCore payload (Mandatory)."
  echo "                                      (e.g., build-report.html generated by specmatic-insights-github-build-reporter)"
  echo "  --host, -h HOST_URL               Specmatic Insights host URL (default: ${SPECMATIC_INSIGHTS_HOST})."
  echo "  --no-verify, -nv                  Disable SSL certificate verification (optional, not recommended)."
  echo "  --help, --usage                   Display this help message."
  echo ""
  echo "Example:"
  echo "  $0 --report-file ./build-report.html --host https://insights.specmatic.io"
  echo "  $0 -rf ./build-report.html -h https://my.insights.server --no-verify"
  exit 1
}

# --- Parse Command Line Arguments ---
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    --report-file|-rf)
      REPORT_FILE_PATH="$2"
      shift 2
      ;;
    --host|-h)
      SPECMATIC_INSIGHTS_HOST="$2"
      shift 2
      ;;
    --no-verify|-nv)
      NO_VERIFY_SSL="true"
      shift 1
      ;;
    --help|--usage)
      usage
      ;;
    *)
      echo "Unknown parameter passed: $1"
      usage
      ;;
  esac
done

# --- Validate mandatory arguments ---
if [[ -z "${REPORT_FILE_PATH}" ]]; then
  echo "Error: --report-file is mandatory."
  usage
fi

if [[ ! -f "${REPORT_FILE_PATH}" ]]; then
  echo "Error: Report file not found at '${REPORT_FILE_PATH}'."
  exit 1
fi

# --- Determine curl SSL option ---
CURL_SSL_OPTION=""
if [[ "${NO_VERIFY_SSL}" == "true" ]]; then
  CURL_SSL_OPTION="--insecure"
  echo "Warning: SSL certificate verification is disabled."
fi

# --- Construct API endpoint URL ---
# Ensure host does not end with a slash, then append API path
API_ENDPOINT="$(echo "${SPECMATIC_INSIGHTS_HOST}" | sed 's:/*$::')/api/github-build-report"

# --- Make the POST request --- 
echo "Posting report from '${REPORT_FILE_PATH}' to '${API_ENDPOINT}'..."

RESPONSE_CODE=$(curl ${CURL_SSL_OPTION} -s -o /dev/stderr -w "%{http_code}" \
  -X POST \
  -H "Content-Type: application/json" \
  --data "@${REPORT_FILE_PATH}" \
  "${API_ENDPOINT}")

CURL_EXIT_CODE=$?

if [[ ${CURL_EXIT_CODE} -ne 0 ]]; then
  echo "Error: curl command failed with exit code ${CURL_EXIT_CODE}. Check stderr output above for details."
  exit 1
fi

echo ""
if [[ "${RESPONSE_CODE}" -eq 200 ]]; then
  echo "Successfully posted build report to Specmatic Insights. HTTP Status: ${RESPONSE_CODE}"
  # The actual response body from insights was sent to stderr by curl's -o /dev/stderr
else
  echo "Failed to post build report to Specmatic Insights. HTTP Status: ${RESPONSE_CODE}"
  echo "Check stderr output above for any error messages from the server."
  exit 1
fi

exit 0
